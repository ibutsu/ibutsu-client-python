"""
Ibutsu API

A system to store and query test results

The version of the OpenAPI document: 2.7.4
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Self
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from ibutsu_client.models.report_parameters import ReportParameters


class Report(BaseModel):
    """
    Report
    """

    id: UUID | None = Field(default=None, description="Unique ID of the report")
    filename: StrictStr | None = Field(default=None, description="The filename of the report")
    mimetype: StrictStr | None = Field(
        default=None, description="The mime type of the downloadable file"
    )
    url: StrictStr | None = Field(
        default=None, description="The URL to the downloadable report (deprecated)"
    )
    download_url: StrictStr | None = Field(
        default=None, description="The URL to the downloadable report"
    )
    view_url: StrictStr | None = Field(default=None, description="The URL to the viewable report")
    parameters: ReportParameters | None = None
    status: StrictStr | None = Field(
        default=None, description='The status of the report, one of "pending", "running", "done"'
    )
    __properties: ClassVar[list[str]] = [
        "id",
        "filename",
        "mimetype",
        "url",
        "download_url",
        "view_url",
        "parameters",
        "status",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Report from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict["parameters"] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Report from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "filename": obj.get("filename"),
                "mimetype": obj.get("mimetype"),
                "url": obj.get("url"),
                "download_url": obj.get("download_url"),
                "view_url": obj.get("view_url"),
                "parameters": ReportParameters.from_dict(obj["parameters"])
                if obj.get("parameters") is not None
                else None,
                "status": obj.get("status"),
            }
        )
        return _obj
